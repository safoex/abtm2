vars:
  clock: ROS.rosgraph_msgs.Clock()
  ROS_SIM: "'ros_sim'"
  ENV: "''"
  sys_time: 0
  SUCCESS: 1
  FAILURE: 2
  RUNNING: 0
  UNDEFINED: 3
  kek: 0

ros:
  /abtm/exception:
    type: publisher
    var: __ROS_EXCEPTION__
    msg: std_msgs/String

  /abtm/yaml_tree_description:
    type: publisher
    var: __ROS_YAML_TREE__
    msg: std_msgs/String

  /abtm/yaml_state_changes:
    type: publisher
    var: __ROS_STATE_CHANGES__
    msg: std_msgs/String

  /abtm/yaml_var_changes:
    type: publisher
    var: __ROS_VAR_CHANGES__
    msg: std_msgs/String

  /abtm/yaml_command:
    type: subscriber
    var: __ROS_COMMAND__
    msg: std_msgs/String

  /clock:
    type: subscriber
    var: clock
    msg: rosgraph_msgs/Clock

templates:
  ros_set_header:
    args:
      required: [var]
      optional:
        clock_var: clock
        time_var: time
        frame: map
    nodes:
      $name:
        type: sequence
        children: [~set_time, ~set_frame]

      ~set_frame:
        type: action
        expr: $var.header.frame_id = '$frame';

      ~set_time:
        type: t/select_ros_env
        child_sim: ~set_time_from_clock
        child_real: ~set_time_from_time

      ~set_time_from_clock:
        type: action
        expr: $var.header.stamp = $clock_var.clock

      ~set_time_from_time:
        type: action
        expr:
          $var.header.stamp.secs = Math.floor($time_var);
          $var.header.stamp.nsecs = Math.floor(($time_var - Math.floor($time_var)) * 1e9);

    children: []

  cast_ros_clock_to_sec:
    args:
      required: [to, from]
    nodes:
      $name:
        type: action
        expr: $to = $from.clock.secs + $from.clock.nsecs/1000000000
    children: []

  condition:
    args:
      optional:
        S: default
        F: default

    nodes:
      $name:
        type: skipper
        children: [~SR, ~FR]
        view:
          S: $S
          F: $F

      ~SR:
        type: condition
        expr: $S
        true_state: SUCCESS
        false_state: RUNNING

      ~FR:
        type: condition
        expr: $F
        true_state: FAILURE
        false_state: RUNNING

    children: []

  latch:
    args:
      required: [child]

    vars:
      __STATE__$child: "UNDEFINED"

    nodes:
      $name:
        type: skipper
        children: [~mask, $child]

      ~mask:
        parent: $name
        type: t/condition
        S: __STATE__$child == SUCCESS
        F: __STATE__$child == FAILURE

    children: [$child]

  select_ros_env:
    args:
      required: [child_sim, child_real]
      optional:
        env: ENV

    nodes:
      $name:
        type: selector
        children: [~select_ros_sim, $child_real]

      ~select_ros_sim:
        type: sequence
        children: [~if_ros_sim, $child_sim]

      ~if_ros_sim:
        type: condition
        expr: $env == ROS_SIM
        true_state: S
        false_state: F

    children: [$child_sim, $child_real]

  set_time:
    args:
      required: [to]
      optional:
        env: ENV
        ros_clock_var: clock
        system_time_var: sys_time

    nodes:
      $name:
        type: t/select_ros_env
        child_sim: ~set_ros_sim
        child_real: ~set_sys_time
        env: $env

      ~set_ros_sim:
        type: t/cast_ros_clock_to_sec
        from: $ros_clock_var
        to: $to

      ~set_sys_time:
        type: action
        expr: $to = $system_time_var

    children: []

  timer_simple:
    args:
      required: [start_state, end_state, delay_secs, time_var]
      optional:
        start_time: ~start_time

    vars:
      $start_time: $time_var
      ~time_diff: 0

    nodes:
      $name:
        type: sequence
        children: [~latched_start_timer, ~assign_diff, ~end_condition]
        view:
          from: $start_state
          to: $end_state
          delay: $delay_secs

      ~latched_start_timer:
        type: t/latch
        child: ~start_timer

      ~start_timer:
        type: action
        expr: $start_time = $time_var

      ~assign_diff:
        type: action
        expr: ~time_diff = $time_var - $start_time;

      ~end_condition:
        type: condition
        expr: ~time_diff > $delay_secs
        true_state: $end_state
        false_state: $start_state

    children: []

  timer_advanced:
    args:
      required: [start_state, end_state, delay_secs]
      optional:
        start_time: ~start_time

    vars:
      $current_time: 0
      $start_time: 0

    nodes:
      $name:
        type: sequence
        children: [~update_time, ~timer_simple]

      ~update_time:
        type: t/set_time
        to: $current_time

      ~timer_simple:
        type: t/timer_simple
        start_state: $start_state
        end_state: $end_state
        delay_secs: $delay_secs
        time_var: $current_time
        start_time: $start_time

    children: []



  tick_every:
    args:
      required: [period_secs, child, time_var]
      optional:
        start_time_var: ~start_time_var

    vars:
      $start_time_var: 0

    nodes:
      $name:
        type: sequence
        children: [~timer, ~reset, $child]
        view:
          delay: $period_secs

      ~timer:
        type: t/timer_simple
        start_state: RUNNING
        end_state: SUCCESS
        delay_secs: $period_secs
        time_var: $time_var
        start_time: $start_time_var

      ~reset:
        type: action
        expr: $start_time_var = $time_var

    children: [$child]


  control_latches_simple:
    args:
      required: [children, control_type]
      construct:
        _children_latched:
          from: children
          V: $V_latch
      view_exclude: [children]

    nodes:
      $name:
        type: $control_type
        children: $_children_latched

    unpack:
      children:
        nodes:
          $V_latch:
            type: t/latch
            child: $V

    children: $children

  seq_latches_simple:
    args:
      required: [children]

    nodes:
      $name:
        type: t/control_latches_simple
        children: $children
        control_type: sequence

    children: $children

  control_latches:
    args:
      required: [children, control_type]
      optional:
        reset_var: ~reset
      construct:
        _reset_children:
          from: children
          V: $V_reset_action

    vars:
      $reset_var: true

    nodes:
      $name:
        type: sequence
        children: [~check_if_reset, ~seq_w_latches]
        view:
          reset: $reset_var

      ~check_if_reset:
        type: selector
        children: [~if_reset, ~reset_children_and_set_var_back]

      ~if_reset:
        type: t/condition
        F: $reset_var == true
        S: $reset_var != true

      ~reset_children_and_set_var_back:
        type: sequence
        children: [~reset_children, ~set_var_back]

      ~set_var_back:
        type: action
        expr: $reset_var = false

      ~reset_children:
        type: sequence
        children: $_reset_children

      ~seq_w_latches:
        type: t/control_latches_simple
        children: $children
        control_type: $control_type

    unpack:
      children:
        nodes:
          $V_reset_action:
            type: action
            expr: __STATE__$V = UNDEFINED; kek++;

    children: $children


  seq_latches:
    args:
      required: [children]
      optional:
        reset_var: ~reset

    nodes:
      $name:
        type: t/control_latches
        children: $children
        reset_var: $reset_var
        control_type: sequence

    children: $children

  ros_set_move_goal_simple:
    args:
      required: [move_goal_var, x, y]
      optional:
        z: 0
        clock_var: clock
        time_var: time

    nodes:
      $name:
        type: sequence
        children: [~set_header, ~set_coords]
        view:
          x: $x
          y: $y
          z: $z

      ~set_header:
        type: t/ros_set_header
        var: $move_goal_var
        clock_var: $clock_var
        time_var: $time_var

      ~set_coords:
        type: action
        expr:
          $move_goal_var.pose.position.x = $x;
          $move_goal_var.pose.position.y = $y;
          $move_goal_var.pose.orientation.w = 1;


    children: []

  ros_set_move_goal:
    args:
      required: [move_goal_var, x, y]

    nodes:
      $name:
        type: sequence
        children: [~set_headers, ~set_coords]
        view:
          x: $x
          y: $y

      ~set_headers:
        type: sequence
        children: [~set_header_main, ~set_header_target_pose]

      ~set_header_main:
        type: t/ros_set_header
        var: $move_goal_var

      ~set_header_target_pose:
        type: t/ros_set_header
        var: $move_goal_var.goal.target_pose

      ~set_coords:
        type: action
        expr:
          $move_goal_var.goal.target_pose.pose.position.x = $x;
          $move_goal_var.goal.target_pose.pose.position.y = $y;
          $move_goal_var.goal.target_pose.pose.orientation.w = 1;


    children: []
  
  ros_measure_distance:
    args: 
      required: [d, A, B]
    
    nodes:
      $name:
        type: action
        expr:
          $d.x = $A.x - $B.x;
          $d.y = $A.y - $B.y;
          $d.z = $A.z - $B.z;
          $d.d = Math.sqrt($d.x * $d.x + $d.y * $d.y + $d.z * $d.z);

    children: []
        
        





